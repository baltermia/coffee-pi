@inject HttpClient Http
@inject ISnackbar Snackbar
@inject NavigationManager NavManager
@inject IDialogService DialogService


@page "/"

<PageTitle>New Routine</PageTitle>

<h1>New Coffee</h1>

<MudButton Variant="Variant.Filled" @onclick="NewRoutine"> New Routine </MudButton>
@if (dailyRoutines.Any())
{
<MudTable Items="@dailyRoutines" Loading="@_loading"  >
        <ToolBarContent>
            <MudText Typo="Typo.h6">Daily Routines</MudText>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Id</MudTh>
            <MudTh>Coffee Type</MudTh>
            <MudTh>Executes Every</MudTh>
            <MudTh>On</MudTh>
            <MudTh>Disable</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.Id</MudTd>
            <MudTd>@context.ButtonType</MudTd>
            @if (context.DaysOfWeek.Count == 7)
            {
                <MudTd>Day</MudTd>
            }
            else
            {
                <MudTd>@(string.Join(", ", context.DaysOfWeek))</MudTd>
            }

            <MudTd>@context.TimeOfDay</MudTd>
            <MudTd><MudButton @onclick="@(() => DisableRoutine(context.Id))">Disable</MudButton></MudTd>
        </RowTemplate>
    </MudTable>
}

@if (weeklyRoutines.Any())
{
<MudTable Items="@weeklyRoutines" Loading="@_loading" >
    <ToolBarContent>
        <MudText Typo="Typo.h6">Weekly Routines</MudText>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Coffee Type</MudTh>
        <MudTh>Executes Every</MudTh>
        <MudTh>On</MudTh>
        <MudTh>Disable</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>@context.Id</MudTd>
        <MudTd>@context.ButtonType</MudTd>
        <MudTd>@context.DayOfWeek</MudTd>
        <MudTd>@context.TimeOfDay</MudTd>
        <MudTd><MudButton @onclick="@(() => DisableRoutine(context.Id))">Disable</MudButton></MudTd>
    </RowTemplate>
</MudTable>
}

@if (singleRoutines.Any())
{
<MudTable Items="@singleRoutines" Loading="@_loading" >
    <ToolBarContent>
        <MudText Typo="Typo.h6">Single Routines</MudText>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Coffee Type</MudTh>
        <MudTh>Executed on</MudTh>
        <MudTh>Disable</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>@context.Id</MudTd>
        <MudTd>@context.ButtonType</MudTd>
        <MudTd>@context.Time</MudTd>
        <MudTd><MudButton @onclick="@(() => DisableRoutine(context.Id))">Disable</MudButton></MudTd>
    </RowTemplate>
</MudTable>    
}




@code {
    private IEnumerable<DailyRoutineDto>? dailyRoutines = new List<DailyRoutineDto>();
    private IEnumerable<WeeklyRoutineDto>? weeklyRoutines = new List<WeeklyRoutineDto>();
    private IEnumerable<SingleRoutineDto>? singleRoutines = new List<SingleRoutineDto>();
    private IEnumerable<CoffeeRoutineDto>? allRoutines = new List<CoffeeRoutineDto>();
    private bool _loading;

    async private void NewRoutine()
    {
        var parameters = new DialogParameters();
        var options = new MudBlazor.DialogOptions { CloseOnEscapeKey = true };
        var Dialog = DialogService.Show<CoffeeModal>("Neuer Kaffee", parameters, options);

        var result = await Dialog.Result;
        await OnInitializedAsync();
    }


    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        try
        {
            allRoutines = await Http.GetBasicAsync<List<CoffeeRoutineDto>>("/api/routine");

            singleRoutines = allRoutines.OfType<SingleRoutineDto>().Where(x => x.Enabled == true);
            dailyRoutines = allRoutines.OfType<DailyRoutineDto>().Where(x => x.Enabled == true);
            weeklyRoutines = allRoutines.OfType<WeeklyRoutineDto>().Where(x => x.Enabled == true);

            _loading = false;
            StateHasChanged();
        }
        catch (HttpRequestException e)
        {
            Snackbar.Add(e.Message, Severity.Warning);
            _loading = false;
        }
    }

    private async void DisableRoutine (int id)
    {
        CoffeeRoutineDto routine = allRoutines.First(x => x.Id == id);
        routine.Enabled = false;
        await Http.PutBasicAsync<CoffeeRoutineDto>($"/api/routine/{routine.Id}", routine);
        OnInitializedAsync();
    }

}

