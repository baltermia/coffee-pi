@inject HttpClient Http
@inject ISnackbar Snackbar
@inject NavigationManager NavManager
@inject IDialogService DialogService


@page "/"

<PageTitle>New Routine</PageTitle>

<h1>New Coffee</h1>

<MudButton Variant="Variant.Filled" @onclick="NewRoutine"> New Routine </MudButton>


<MudTable Items="@dailyRoutines" Loading="@_loading" >
    <ToolBarContent>
        <MudText Typo="Typo.h6">Daily Routines</MudText>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Coffee Type</MudTh>
        <MudTh>Executes Every</MudTh>
        <MudTh>On</MudTh>
        <MudTh>Delete Routine</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>@context.Id</MudTd>
        <MudTd>@context.ButtonType</MudTd>
        <MudTd>daily</MudTd> @*ToDo: Change to Display specific Days*@
        <MudTd>@context.TimeOfDay</MudTd>
        <MudTd><MudButton @onclick="@(() => DeleteDaily(context.Id))">Delete</MudButton></MudTd>
    </RowTemplate>
</MudTable>

<MudTable Items="@weeklyRoutines" Loading="@_loading" >
    <ToolBarContent>
        <MudText Typo="Typo.h6">Weekly Routines</MudText>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Coffee Type</MudTh>
        <MudTh>Executes Every</MudTh>
        <MudTh>On</MudTh>
        <MudTh>Delete Routine</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>@context.Id</MudTd>
        <MudTd>@context.ButtonType</MudTd>
        <MudTd>@context.DayOfWeek</MudTd>
        <MudTd>@context.TimeOfDay</MudTd>
        <MudTd><MudButton @onclick="@(() => DeleteWeekly(context.Id))">Delete</MudButton></MudTd>
    </RowTemplate>
</MudTable>

<MudTable Items="@singleRoutines" Loading="@_loading" >
    <ToolBarContent>
        <MudText Typo="Typo.h6">Single Routines</MudText>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Coffee Type</MudTh>
        <MudTh>Executed on</MudTh>
        <MudTh>Delete Routine</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>@context.Id</MudTd>
        <MudTd>@context.ButtonType</MudTd>
        <MudTd>@context.Time</MudTd>
        <MudTd><MudButton @onclick="@(() => DeleteWeekly(context.Id))">Delete</MudButton></MudTd>
    </RowTemplate>
</MudTable>



@code {
    private IEnumerable<DailyRoutineDto>? dailyRoutines = new List<DailyRoutineDto>();
    private IEnumerable<WeeklyRoutineDto>? weeklyRoutines = new List<WeeklyRoutineDto>();
    private IEnumerable<SingleRoutineDto>? singleRoutines = new List<SingleRoutineDto>();
    private bool _loading;

    async private void NewRoutine()
    {
        var parameters = new DialogParameters();
        var options = new MudBlazor.DialogOptions { CloseOnEscapeKey = true };
        var Dialog = DialogService.Show<CoffeeTypeModal>("Neuer Kaffee", parameters, options);

        var result = await Dialog.Result;
        await OnInitializedAsync();
    }


    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        try
        {
            dailyRoutines = await Http.GetBasicAsync<List<DailyRoutineDto>>("/api/daily");
            weeklyRoutines = await Http.GetBasicAsync<List<WeeklyRoutineDto>>("/api/weekly");
            singleRoutines = await Http.GetBasicAsync<List<SingleRoutineDto>>("/api/single");

            _loading = false;
            StateHasChanged();
        }
        catch (HttpRequestException e)
        {
            Snackbar.Add(e.Message, Severity.Warning);
            _loading = false;
        }


    async void DeleteDaily(int id)
    {
        await Http.DeleteAsync($"/{id}");
    }
    async void DeleteWeekly(int id)
    {
        await Http.DeleteAsync($"/{id}");
    }
}
