@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using CoffeePi.Shared.DataTransferObjects

@inject ISnackbar Snackbar
@inject HttpClient Http
@inject IDialogService DialogService

<MudDialog>
    <DialogContent>
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">

            <MudSelect T=CoffeeButton Label="Coffee" AnchorOrigin="Origin.BottomCenter" @bind-Value="CoffeeType" Text="Select Coffee Type" >
                <MudSelectItem Value=CoffeeButton.SmallCup>Kleiner Kaffee</MudSelectItem>
                <MudSelectItem Value=CoffeeButton.BigCup>Grosser Kaffee</MudSelectItem>
                <MudSelectItem Value=CoffeeButton.Espresso>Espresso</MudSelectItem>
                <MudSelectItem Value=CoffeeButton.HotWater>Heisses Wasser für Tee</MudSelectItem>
            </MudSelect>
            </MudForm>   
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Abbrechen</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Weiter</MudButton>
    </DialogActions>
</MudDialog>


@code{

    MudForm form;
    bool success;
    string[] errors = { };
    private CoffeeButton CoffeeType = new();
    [CascadingParameter] 
    MudDialogInstance MudDialog { get; set; }

    async Task Submit()
    {
        var parameters = new DialogParameters();
        var options = new MudBlazor.DialogOptions { CloseOnEscapeKey = true };
        parameters.Add("CoffeeType", CoffeeType);
        var Dialog = DialogService.Show<CoffeeTimeModal>("zeit", parameters, options);
       var result = await Dialog.Result;

       MudDialog.Close(DialogResult.Ok(true));
    }





    void Cancel() => MudDialog.Cancel();


}

