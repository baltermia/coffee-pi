@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using CoffeePi.Shared.DataTransferObjects
@using System.Linq

@inject ISnackbar Snackbar
@inject HttpClient Http
@inject IDialogService DialogService

<MudDialog>
    <DialogContent>
        <MudPaper>
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">

            <MudSelect T=CoffeeButton Label="Coffee" AnchorOrigin="Origin.BottomCenter" @bind-Value="CoffeeType" Text="Select Coffee Type" Class="pa-4" >
                <MudSelectItem Value=CoffeeButton.SmallCup>Kleiner Kaffee</MudSelectItem>
                <MudSelectItem Value=CoffeeButton.BigCup>Grosser Kaffee</MudSelectItem>
                <MudSelectItem Value=CoffeeButton.Espresso>Espresso</MudSelectItem>
                <MudSelectItem Value=CoffeeButton.HotWater>Heisses Wasser für Tee</MudSelectItem>
            </MudSelect>
                <RadzenDatePicker TValue="DateTime" ShowTime="true" HoursStep="1.5" MinutesStep="5" @bind-Value=@time Class="pa-4"  />
                <MudButton OnClick="TimeNow">Jetzt</MudButton>
            <MudSelect T=string Label="Wiederholung" AnchorOrigin="Origin.BottomCenter" @bind-Value="RoutineType" Text="Select Repetition" Class="pa-4">
                <MudSelectItem Value="@("Once")">Keine Wiederholung</MudSelectItem>
                <MudSelectItem Value="@("Daily")">Täglich</MudSelectItem>
                <MudSelectItem Value="@("Weekly")">Wöchentlich</MudSelectItem>
                <MudSelectItem Value="@("Custom")">Benutzerdefiniert</MudSelectItem>
            </MudSelect>
            @if (RoutineType == "Custom")
            {
                <MudSelect T="DayOfWeek" Label="Custom" MultiSelection="true" @bind-SelectedValues="selectedDays" Class="pa-4">

                        <MudSelectItem Value="DayOfWeek.Monday">Monday</MudSelectItem>
                        <MudSelectItem Value="DayOfWeek.Tuesday">Tuesday</MudSelectItem>
                         <MudSelectItem Value="DayOfWeek.Wednesday">Wednesday</MudSelectItem>
                         <MudSelectItem Value="DayOfWeek.Thursday">Thursday</MudSelectItem>
                         <MudSelectItem Value="DayOfWeek.Friday">Friday</MudSelectItem>
                         <MudSelectItem Value="DayOfWeek.Saturday">Saturday</MudSelectItem>
                         <MudSelectItem Value="DayOfWeek.Sunday">Sunday</MudSelectItem>
                </MudSelect>
            }
        </MudForm>  
    </MudPaper>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Abbrechen</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Speichern</MudButton>
    </DialogActions>
</MudDialog>


@code{

    MudForm form;
    bool success;
    string[] errors = { };
    private CoffeeButton CoffeeType = new();
    [CascadingParameter] 
    MudDialogInstance MudDialog { get; set; }
    private DateTime time = DateTime.Now;
    private string RoutineType;
    IEnumerable<DayOfWeek> selectedDays;


    async Task Submit()
    {

        try
        {
            switch (RoutineType) //ToDo: Fix DateTime to TimeOnly Conversion
            {
                case "Once":
                    SingleRoutineDto SingleCoffee = new();
                    SingleCoffee.ButtonType = CoffeeType;
                    SingleCoffee.Time = time;
                    SingleCoffee.Enabled = true;
                    await Http.PostBasicAsync<SingleRoutineDto>("/api/single", SingleCoffee);


                    break;

                case "Daily":
                    List<DayOfWeek> days = new();
                    DailyRoutineDto DailyCoffee = new();
                    DailyCoffee.ButtonType = CoffeeType;
                    DailyCoffee.TimeOfDay = TimeOnly.FromDateTime(time);
                    DailyCoffee.Enabled = true;
                    //ToDo: Automate
                    days.Add(DayOfWeek.Monday);
                    days.Add(DayOfWeek.Tuesday);
                    days.Add(DayOfWeek.Wednesday);
                    days.Add(DayOfWeek.Thursday);
                    days.Add(DayOfWeek.Friday);
                    days.Add(DayOfWeek.Saturday);
                    days.Add(DayOfWeek.Sunday);
                    
                    DailyCoffee.DaysOfWeek = days;

                    await Http.PostBasicAsync<DailyRoutineDto>("/api/daily", DailyCoffee);
                    break;

                case "Weekly":
                    WeeklyRoutineDto WeeklyCoffee = new();
                    WeeklyCoffee.ButtonType = CoffeeType;
                    WeeklyCoffee.TimeOfDay = TimeOnly.FromDateTime(time);
                    WeeklyCoffee.DayOfWeek = time.DayOfWeek;
                    WeeklyCoffee.Enabled = true;
                    await Http.PostBasicAsync<WeeklyRoutineDto>("/api/weekly", WeeklyCoffee);
                    break;

                case "Custom":
                    days = selectedDays.ToList();
                    DailyRoutineDto CustomCoffee = new();
                    CustomCoffee.ButtonType = CoffeeType;
                    CustomCoffee.TimeOfDay = TimeOnly.FromDateTime(time);
                    CustomCoffee.Enabled = true;                 
                    CustomCoffee.DaysOfWeek = days;

                    await Http.PostBasicAsync<DailyRoutineDto>("/api/daily", CustomCoffee);
                    break;
            }
        }
        catch (HttpRequestException e)
        {
            Snackbar.Add(e.Message, Severity.Warning);
        }

       MudDialog.Close(DialogResult.Ok(true));
    }


    async void TimeNow()
    {
        time = DateTime.Now;
    }


    void Cancel() => MudDialog.Cancel();


}

