@page "/Stats"

@inject HttpClient Http

<MudText Align=Align.Center Typo=Typo.h2>Statistics</MudText>

<MudChart ChartType=ChartType.Line ChartSeries=weekSeries XAxisLabels=weekAxisLabels />

<MudChart ChartType=ChartType.Line ChartSeries=totalSeries XAxisLabels=totalAxisLabels />

@code {
    private List<ChartSeries> weekSeries = new();
    private List<ChartSeries> totalSeries = new();
    private string[] weekAxisLabels = { };
    private string[] totalAxisLabels = { };

    protected async override Task OnInitializedAsync()
    {
        IEnumerable<DayOfWeek> enums = Enum.GetValues<DayOfWeek>();
        DayOfWeek today = DateTime.Now.DayOfWeek;

        // skips to the day of today, then concatenates all of the other days
        IEnumerable<DayOfWeek> sortedEnums = enums.Skip((int)today).Concat(enums.Take((int)today));

        weekAxisLabels = sortedEnums.Select(e => nameof(e)).ToArray();

        // get all routines
        IEnumerable<SingleRoutineDto> routines = await Http.GetBasicAsync<IEnumerable<SingleRoutineDto>>("api/routine");

        // get all executions for each routine type

        IEnumerable<ExecutedRoutineDto> singleExecutions =
            (await Task.WhenAll(
                routines.OfType<SingleRoutineDto>().Select(
                    async e => await Http.GetBasicAsync<IEnumerable<ExecutedRoutineDto>>($"api/executed/from-routine/{e.Id}")
                )
            )).SelectMany(e => e);

        IEnumerable<ExecutedRoutineDto> dailyExecutions =
            (await Task.WhenAll(
                routines.OfType<DailyRoutineDto>().Select(
                    async e => await Http.GetBasicAsync<IEnumerable<ExecutedRoutineDto>>($"api/executed/from-routine/{e.Id}")
                )
            )).SelectMany(e => e);

        IEnumerable<ExecutedRoutineDto> weeklyExecutions =
            (await Task.WhenAll(
                routines.OfType<WeeklyRoutineDto>().Select(
                    async e => await Http.GetBasicAsync<IEnumerable<ExecutedRoutineDto>>($"api/executed/from-routine/{e.Id}")
                )
            )).SelectMany(e => e);

        IEnumerable<ExecutedRoutineDto> allExecutions = singleExecutions.Concat(dailyExecutions).Concat(weeklyExecutions);

        weekSeries = new()
        {
            new () { Name = "Single", Data = sortedEnums.Select(day => (double)singleExecutions.Count(e => e.Time.DayOfWeek == day)).ToArray() },
            new () { Name = "Daily", Data = sortedEnums.Select(day => (double)dailyExecutions.Count(e => e.Time.DayOfWeek == day)).ToArray() },
            new () { Name = "Weekly", Data = sortedEnums.Select(day => (double)weeklyExecutions.Count(e => e.Time.DayOfWeek == day)).ToArray() }
        };

        DateTime min = allExecutions.Min(e => e.Time);
        TimeSpan span = (DateTime.Now - min) / 7;

        IEnumerable<DateTime> labelTimes = Enumerable.Range(0, 7).Select(i => min.Add(i * span));

        totalAxisLabels = labelTimes.Select(dt => $"{dt.Day}.{dt.Month}").ToArray();

        totalSeries = new()
        {
            new() { Name = "Single" , Data = labelTimes.Select(dt => (double)singleExecutions.Count(e => e.Time >= dt && e.Time < dt + span)).ToArray() },
            new() { Name = "Daily" , Data = labelTimes.Select(dt => (double)dailyExecutions.Count(e => e.Time >= dt && e.Time < dt + span)).ToArray() },
            new() { Name = "Weekly" , Data = labelTimes.Select(dt => (double)weeklyExecutions.Count(e => e.Time >= dt && e.Time < dt + span)).ToArray() }
        };

        await base.OnInitializedAsync();
    }
}
